type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | XOR
  | FISZERO
  | FLESS
  | FISPOS
  | FISNEG
  | FNEG
  | FABS
  | FHALF
  | FSQR
  | FLOOR
  | FLOATOFINT
  | INTOFFLOAT
  | SQRT
  | COS
  | SIN
  | TAN
  | ATAN
  | READINT
  | READFLOAT
  | PRINTINT
  | PRINTFLOAT
  | PLUS
  | MINUS
  | AST
  | SLASH
  | PLUS_DOT
  | MINUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | OPEN
  | SEMISEMI
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Syntax
let addtyp x = (x, Type.gentyp ())

(* MATSUSHITA: added functions *)

let symbol_range () = Some (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())

let just body = None, body
let letint x e e' = just @@ Let (None, (x, Type.Int), e, e')
let letfloat x e e' = just @@ Let (None, (x, Type.Float), e, e')
let (&!) e n = just @@ AndI(e, n)
let var x = just @@ Var x
let int n = just @@ Int n
let float a = just @@ Float a
let ftoi e = just @@ FToI e
let itof e = just @@ IToF e
let (+!) e e' = just @@ FAdd(e, e')
let (-!) e e' = just @@ FSub(e, e')
let ( *!) e e' = just @@ FMul(e, e')
let (/!) e e' = just @@ FDiv(e, e')

let cos e =
  letfloat "x" e @@
  letfloat "xx" (var "x" *! var "x") @@
  letfloat "t2" (var "xx" /! float 2.) @@
  letfloat "t4" (var "t2" *! var "xx" /! float 12.) @@
  letfloat "t6" (var "t4" *! var "xx" /! float 30.) @@
  letfloat "t8" (var "t6" *! var "xx" /! float 56.) @@
  letfloat "t10" (var "t8" *! var "xx" /! float 90.) @@
  float 1. -! var "t2" +! var "t4" -! var "t6" +! var "t8" -! var "t10"

let pi = float 3.1415927

let sin e =
  letfloat "x" e @@
  letint "n" (ftoi (var "x" /! pi)) @@
  (float 1. -! itof (var "n" &! 1) *! float 2.) *!
    cos (var "x" -! itof (var "n") *! pi -! pi /! float 2.)

let tan e =
  letfloat "x" e @@
  letfloat "xx" (var "x" *! var "x") @@
  letfloat "t3" (var "x" *! var "xx" /! float 3.) @@
  letfloat "t5" (var "t3" *! var "xx" *! (float 2. /! float 5.)) @@
  letfloat "t7" (var "t5" *! var "xx" *! (float 17. /! float 42.)) @@
  letfloat "t9" (var "t7" *! var "xx" *! (float 62. /! float 153.)) @@
  var "x" +! var "t3" +! var "t5" +! var "t7" +! var "t9"

let atan e =
  letfloat "x" e @@
  letfloat "t1" ((var "x" -! float 2.) /! float 5.) @@
  letfloat "t2" ((var "t1" *! var "t1" *! float 2.)) @@
  letfloat "t3" ((var "t2" *! var "t1" *! (float 11. /! float 6.))) @@
  letfloat "t4" ((var "t3" *! var "t1" *! (float 18. /! float 11.))) @@
  letfloat "t5" ((var "t4" *! var "t1" *! (float 41. /! float 30.))) @@
  float 1.10714872 +! var "t1" -! var "t2" +! var "t3" -! var "t4" +! var "t5"

# 120 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* XOR *);
  262 (* FISZERO *);
  263 (* FLESS *);
  264 (* FISPOS *);
  265 (* FISNEG *);
  266 (* FNEG *);
  267 (* FABS *);
  268 (* FHALF *);
  269 (* FSQR *);
  270 (* FLOOR *);
  271 (* FLOATOFINT *);
  272 (* INTOFFLOAT *);
  273 (* SQRT *);
  274 (* COS *);
  275 (* SIN *);
  276 (* TAN *);
  277 (* ATAN *);
  278 (* READINT *);
  279 (* READFLOAT *);
  280 (* PRINTINT *);
  281 (* PRINTFLOAT *);
  282 (* PLUS *);
  283 (* MINUS *);
  284 (* AST *);
  285 (* SLASH *);
  286 (* PLUS_DOT *);
  287 (* MINUS_DOT *);
  288 (* AST_DOT *);
  289 (* SLASH_DOT *);
  290 (* EQUAL *);
  291 (* LESS_GREATER *);
  292 (* LESS_EQUAL *);
  293 (* GREATER_EQUAL *);
  294 (* LESS *);
  295 (* GREATER *);
  296 (* IF *);
  297 (* THEN *);
  298 (* ELSE *);
  300 (* LET *);
  301 (* IN *);
  302 (* REC *);
  303 (* COMMA *);
  304 (* ARRAY_CREATE *);
  305 (* DOT *);
  306 (* LESS_MINUS *);
  307 (* OPEN *);
  308 (* SEMISEMI *);
  309 (* SEMICOLON *);
  310 (* LPAREN *);
  311 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  299 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\003\000\003\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\006\000\
\005\000\005\000\007\000\007\000\008\000\008\000\009\000\009\000\
\000\000\000\000"

let yylen = "\002\000\
\004\000\000\000\005\000\003\000\002\000\001\000\001\000\001\000\
\001\000\005\000\001\000\002\000\003\000\002\000\003\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\006\000\002\000\003\000\003\000\
\003\000\003\000\006\000\006\000\008\000\008\000\005\000\002\000\
\001\000\008\000\007\000\003\000\002\000\003\000\001\000\004\000\
\002\000\001\000\002\000\001\000\003\000\003\000\003\000\003\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\063\000\006\000\007\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\037\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\065\000\000\000\000\000\000\000\000\000\
\072\000\071\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000"

let yydgoto = "\003\000\
\037\000\041\000\143\000\038\000\134\000\104\000\092\000\039\000\
\106\000"

let yysindex = "\010\000\
\221\255\212\254\000\000\000\000\000\000\000\000\000\000\060\004\
\060\004\060\004\060\004\060\004\060\004\060\004\060\004\060\004\
\060\004\060\004\060\004\060\004\060\004\060\004\060\004\060\004\
\060\004\060\004\060\004\060\004\060\004\221\255\221\255\221\255\
\000\000\152\255\060\004\161\255\183\006\106\255\218\254\245\254\
\000\000\242\254\108\005\242\254\108\005\242\254\242\254\242\254\
\242\254\242\254\242\254\242\254\242\254\242\254\242\254\242\254\
\242\254\242\254\242\254\242\254\242\254\242\254\242\254\241\254\
\241\254\215\005\000\255\009\255\251\254\255\254\108\005\000\000\
\248\254\221\255\221\255\042\255\044\255\221\255\221\255\221\255\
\221\255\221\255\221\255\221\255\221\255\221\255\221\255\221\255\
\221\255\253\254\242\254\060\004\221\255\012\255\011\255\242\254\
\242\254\221\255\221\255\221\255\025\255\025\255\025\255\024\255\
\023\255\217\254\242\254\000\000\008\255\008\255\000\000\000\000\
\008\255\008\255\241\254\241\254\104\255\104\255\104\255\104\255\
\104\255\104\255\233\006\183\006\221\255\242\254\233\006\027\255\
\221\255\243\005\015\006\043\006\025\255\064\255\066\255\067\255\
\221\255\061\255\063\255\079\255\155\005\071\255\000\000\185\005\
\221\255\221\255\221\255\000\000\221\255\221\255\221\255\183\006\
\000\000\000\000\221\255\065\255\082\255\000\000\211\006\183\006\
\183\006\071\006\099\006\183\006\127\006\221\255\221\255\221\255\
\221\255\221\255\211\006\155\006\183\006\183\006\183\006\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\117\000\127\000\145\003\000\000\
\000\000\157\000\000\000\187\000\000\000\217\000\247\000\021\001\
\057\001\090\001\120\001\167\001\197\001\227\001\001\002\031\002\
\061\002\097\002\130\002\160\002\190\002\221\002\251\002\176\003\
\206\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\004\000\000\050\000\025\003\000\000\000\000\000\000\055\003\
\085\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\115\003\000\000\071\004\101\004\000\000\000\000\
\131\004\161\004\236\003\011\004\185\004\216\004\246\004\020\005\
\051\005\081\005\017\000\137\001\000\000\097\000\066\000\118\000\
\000\000\000\000\000\000\000\000\088\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\234\004\
\000\000\000\000\000\000\001\000\000\000\000\000\192\004\008\005\
\036\005\000\000\000\000\081\255\000\000\000\000\000\000\000\000\
\000\000\000\000\099\005\118\000\104\005\119\005\125\005\000\000"

let yygindex = "\000\000\
\230\255\000\000\212\255\067\000\156\255\000\000\000\000\000\000\
\000\000"

let yytablesize = 2064
let yytable = "\101\000\
\010\000\135\000\136\000\064\000\065\000\066\000\040\000\139\000\
\093\000\073\000\001\000\002\000\076\000\077\000\102\000\140\000\
\070\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\094\000\
\148\000\099\000\095\000\076\000\077\000\103\000\088\000\080\000\
\081\000\105\000\100\000\111\000\089\000\112\000\108\000\109\000\
\110\000\068\000\125\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\121\000\122\000\123\000\124\000\128\000\
\129\000\069\000\127\000\133\000\137\000\138\000\142\000\130\000\
\131\000\132\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\067\000\149\000\141\000\150\000\151\000\071\000\144\000\153\000\
\091\000\154\000\005\000\006\000\007\000\096\000\152\000\097\000\
\155\000\157\000\166\000\167\000\073\000\002\000\159\000\160\000\
\161\000\066\000\162\000\163\000\164\000\064\000\011\000\176\000\
\165\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\107\000\000\000\171\000\172\000\173\000\174\000\175\000\
\000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\
\067\000\000\000\090\000\000\000\012\000\000\000\126\000\036\000\
\004\000\005\000\006\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\014\000\030\000\000\000\000\000\000\000\031\000\
\000\000\000\000\068\000\000\000\000\000\069\000\000\000\000\000\
\032\000\000\000\000\000\033\000\034\000\070\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\036\000\072\000\
\016\000\000\000\000\000\000\000\004\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\017\000\030\000\
\000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
\000\000\010\000\010\000\010\000\032\000\000\000\000\000\033\000\
\034\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\036\000\000\000\018\000\000\000\000\000\000\000\
\000\000\000\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\000\000\010\000\010\000\010\000\010\000\010\000\000\000\010\000\
\000\000\010\000\068\000\068\000\068\000\010\000\010\000\010\000\
\021\000\070\000\070\000\000\000\070\000\070\000\000\000\070\000\
\000\000\000\000\000\000\000\000\000\000\070\000\000\000\070\000\
\000\000\000\000\000\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\019\000\068\000\068\000\068\000\068\000\068\000\000\000\
\068\000\067\000\067\000\067\000\000\000\000\000\068\000\068\000\
\068\000\000\000\069\000\069\000\000\000\069\000\069\000\000\000\
\069\000\000\000\000\000\000\000\000\000\000\000\069\000\020\000\
\069\000\000\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\060\000\067\000\067\000\067\000\067\000\067\000\000\000\067\000\
\000\000\000\000\000\000\000\000\000\000\067\000\067\000\067\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\022\000\011\000\
\011\000\000\000\011\000\011\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\011\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\023\000\012\000\012\000\000\000\
\012\000\012\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\012\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\024\000\014\000\014\000\000\000\014\000\014\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\014\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\025\000\016\000\016\000\000\000\016\000\016\000\000\000\016\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\016\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\026\000\017\000\
\017\000\000\000\017\000\017\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\017\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\027\000\018\000\018\000\000\000\
\018\000\018\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\018\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\028\000\021\000\021\000\000\000\021\000\021\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\021\000\000\000\021\000\
\000\000\000\000\000\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\029\000\019\000\019\000\000\000\019\000\019\000\000\000\
\019\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\019\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\030\000\
\020\000\020\000\000\000\020\000\020\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\020\000\000\000\
\000\000\060\000\060\000\000\000\060\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\000\000\060\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\022\000\000\000\022\000\022\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\022\000\032\000\022\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\000\000\023\000\023\000\000\000\
\023\000\023\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\023\000\033\000\023\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\000\000\024\000\024\000\000\000\024\000\024\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\024\000\
\056\000\024\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\000\000\025\000\025\000\000\000\025\000\025\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\025\000\013\000\025\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\000\000\026\000\
\026\000\000\000\026\000\026\000\000\000\026\000\000\000\000\000\
\000\000\000\000\000\000\026\000\015\000\026\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\000\000\027\000\027\000\000\000\
\027\000\027\000\000\000\027\000\000\000\000\000\000\000\000\000\
\000\000\027\000\062\000\027\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\000\000\028\000\028\000\000\000\028\000\028\000\000\000\028\000\
\057\000\000\000\000\000\000\000\000\000\028\000\000\000\028\000\
\000\000\000\000\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\000\000\029\000\029\000\000\000\029\000\029\000\034\000\
\029\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\029\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
\030\000\030\000\000\000\030\000\030\000\046\000\030\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\030\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\000\000\031\000\031\000\
\000\000\031\000\031\000\049\000\031\000\000\000\000\000\000\000\
\000\000\000\000\031\000\000\000\031\000\000\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\000\000\032\000\032\000\000\000\
\032\000\032\000\050\000\032\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\032\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\000\000\033\000\033\000\000\000\033\000\033\000\
\061\000\033\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\033\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\056\000\056\000\000\000\056\000\056\000\035\000\056\000\
\000\000\000\000\000\000\000\000\000\000\056\000\000\000\056\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\000\000\013\000\
\013\000\000\000\013\000\013\000\036\000\013\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\013\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\000\000\015\000\015\000\000\000\
\015\000\015\000\047\000\015\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\015\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\000\000\062\000\062\000\000\000\062\000\062\000\
\048\000\062\000\000\000\000\000\000\000\000\000\000\000\062\000\
\000\000\062\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\039\000\057\000\057\000\000\000\057\000\057\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\057\000\000\000\057\000\
\000\000\034\000\034\000\000\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\040\000\
\034\000\034\000\000\000\034\000\034\000\000\000\034\000\000\000\
\000\000\000\000\000\000\000\000\034\000\000\000\034\000\046\000\
\046\000\055\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\043\000\046\000\046\000\
\000\000\046\000\046\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\046\000\000\000\046\000\049\000\049\000\051\000\
\000\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\044\000\049\000\049\000\000\000\049\000\
\049\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\049\000\052\000\050\000\050\000\000\000\000\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\041\000\050\000\050\000\000\000\050\000\050\000\
\000\000\050\000\000\000\000\000\005\000\006\000\007\000\050\000\
\000\000\050\000\061\000\000\000\061\000\061\000\061\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\042\000\061\000\061\000\000\000\000\000\061\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\061\000\000\000\061\000\
\035\000\035\000\059\000\000\000\035\000\035\000\033\000\053\000\
\035\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\
\035\000\036\000\035\000\035\000\000\000\035\000\054\000\000\000\
\000\000\000\000\000\000\035\000\058\000\035\000\036\000\036\000\
\000\000\000\000\036\000\036\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\000\000\036\000\036\000\000\000\
\036\000\036\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\036\000\047\000\047\000\000\000\000\000\
\047\000\047\000\000\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\047\000\047\000\000\000\047\000\047\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\047\000\048\000\048\000\000\000\000\000\048\000\048\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\000\000\048\000\048\000\000\000\048\000\048\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\048\000\
\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\039\000\039\000\000\000\039\000\039\000\000\000\039\000\
\045\000\045\000\000\000\045\000\045\000\039\000\000\000\039\000\
\000\000\000\000\000\000\000\000\045\000\000\000\045\000\000\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
\040\000\040\000\000\000\040\000\040\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\040\000\000\000\
\000\000\000\000\055\000\055\000\000\000\055\000\055\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\043\000\043\000\
\055\000\043\000\043\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\043\000\000\000\000\000\000\000\
\051\000\051\000\000\000\051\000\051\000\044\000\044\000\044\000\
\044\000\044\000\044\000\000\000\044\000\044\000\051\000\044\000\
\044\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\044\000\000\000\052\000\052\000\000\000\052\000\
\052\000\000\000\000\000\000\000\041\000\041\000\041\000\041\000\
\041\000\041\000\052\000\041\000\041\000\000\000\041\000\041\000\
\000\000\041\000\000\000\000\000\000\000\000\000\000\000\041\000\
\000\000\041\000\000\000\000\000\005\000\006\000\007\000\000\000\
\000\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\042\000\042\000\000\000\042\000\042\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\042\000\
\000\000\000\000\000\000\059\000\059\000\000\000\059\000\059\000\
\053\000\053\000\000\000\053\000\053\000\000\000\033\000\059\000\
\000\000\059\000\000\000\000\000\095\000\000\000\053\000\054\000\
\054\000\036\000\054\000\054\000\000\000\058\000\058\000\000\000\
\058\000\058\000\000\000\000\000\000\000\054\000\000\000\000\000\
\000\000\000\000\000\000\058\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\088\000\000\000\000\000\000\000\000\000\000\000\089\000\
\000\000\156\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\088\000\
\000\000\000\000\000\000\000\000\000\000\089\000\000\000\158\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\000\000\098\000\
\000\000\000\000\000\000\000\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\089\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\000\000\000\000\145\000\000\000\000\000\000\000\
\000\000\088\000\000\000\000\000\000\000\000\000\000\000\089\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\000\000\000\000\
\000\000\000\000\000\000\146\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\089\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\000\000\000\000\000\000\000\000\000\000\147\000\
\000\000\088\000\000\000\000\000\000\000\000\000\000\000\089\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\000\000\000\000\
\000\000\000\000\000\000\168\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\089\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\000\000\000\000\000\000\000\000\000\000\169\000\
\000\000\088\000\000\000\000\000\000\000\000\000\000\000\089\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\000\000\000\000\
\000\000\000\000\000\000\170\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\089\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\000\000\000\000\000\000\000\000\142\000\000\000\
\000\000\088\000\000\000\000\000\000\000\000\000\000\000\089\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\089\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\088\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000"

let yycheck = "\005\001\
\000\000\102\000\103\000\030\000\031\000\032\000\051\001\047\001\
\047\001\036\000\001\000\002\000\028\001\029\001\020\001\055\001\
\000\000\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\043\001\
\133\000\034\001\049\001\028\001\029\001\043\001\047\001\032\001\
\033\001\043\001\034\001\002\001\053\001\002\001\055\001\074\000\
\075\000\000\000\054\001\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\052\001\
\054\001\000\000\093\000\043\001\045\001\047\001\044\001\098\000\
\099\000\100\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\000\000\034\001\125\000\034\001\034\001\035\000\129\000\043\001\
\038\000\043\001\001\001\002\001\003\001\043\000\137\000\045\000\
\034\001\043\001\050\001\034\001\000\000\000\000\145\000\146\000\
\147\000\034\001\149\000\150\000\151\000\045\001\000\000\172\000\
\155\000\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\071\000\255\255\166\000\167\000\168\000\169\000\170\000\
\255\255\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\001\001\255\255\049\001\255\255\000\000\255\255\092\000\054\001\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\000\000\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\043\001\255\255\255\255\046\001\255\255\255\255\
\040\001\255\255\255\255\043\001\044\001\054\001\255\255\255\255\
\048\001\255\255\255\255\255\255\255\255\255\255\054\001\055\001\
\000\000\255\255\255\255\255\255\000\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\000\000\027\001\
\255\255\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\040\001\255\255\255\255\043\001\
\044\001\255\255\255\255\255\255\048\001\255\255\255\255\255\255\
\255\255\255\255\054\001\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\043\001\044\001\045\001\255\255\047\001\
\255\255\049\001\001\001\002\001\003\001\053\001\054\001\055\001\
\000\000\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\255\255\255\255\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\000\000\041\001\042\001\043\001\044\001\045\001\255\255\
\047\001\001\001\002\001\003\001\255\255\255\255\053\001\054\001\
\055\001\255\255\041\001\042\001\255\255\044\001\045\001\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\000\000\
\055\001\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\000\000\041\001\042\001\043\001\044\001\045\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\000\000\041\001\
\042\001\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\255\255\055\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\000\000\041\001\042\001\255\255\
\044\001\045\001\255\255\047\001\255\255\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\000\000\041\001\042\001\255\255\044\001\045\001\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\055\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\000\000\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\000\000\041\001\
\042\001\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\255\255\055\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\000\000\041\001\042\001\255\255\
\044\001\045\001\255\255\047\001\255\255\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\000\000\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\255\255\255\255\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\000\000\041\001\042\001\255\255\044\001\045\001\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\255\255\
\055\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\000\000\
\041\001\042\001\255\255\044\001\045\001\255\255\047\001\255\255\
\255\255\255\255\255\255\255\255\053\001\255\255\055\001\255\255\
\255\255\041\001\042\001\255\255\044\001\045\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\055\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\042\001\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\000\000\055\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\255\255\041\001\042\001\255\255\
\044\001\045\001\255\255\047\001\255\255\255\255\255\255\255\255\
\255\255\053\001\000\000\055\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\041\001\042\001\255\255\044\001\045\001\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\000\000\055\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\000\000\055\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\042\001\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\000\000\055\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\255\255\041\001\042\001\255\255\
\044\001\045\001\255\255\047\001\255\255\255\255\255\255\255\255\
\255\255\053\001\000\000\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\000\000\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\255\255\255\255\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\255\255\041\001\042\001\255\255\044\001\045\001\000\000\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\255\255\
\055\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\255\255\
\041\001\042\001\255\255\044\001\045\001\000\000\047\001\255\255\
\255\255\255\255\255\255\255\255\053\001\255\255\055\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\041\001\042\001\
\255\255\044\001\045\001\000\000\047\001\255\255\255\255\255\255\
\255\255\255\255\053\001\255\255\055\001\255\255\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\255\255\041\001\042\001\255\255\
\044\001\045\001\000\000\047\001\255\255\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\041\001\042\001\255\255\044\001\045\001\
\000\000\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\055\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\255\255\044\001\045\001\000\000\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\042\001\255\255\044\001\045\001\000\000\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\255\255\055\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\255\255\041\001\042\001\255\255\
\044\001\045\001\000\000\047\001\255\255\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\041\001\042\001\255\255\044\001\045\001\
\000\000\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\055\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\000\000\041\001\042\001\255\255\044\001\045\001\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\026\001\027\001\255\255\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\000\000\
\041\001\042\001\255\255\044\001\045\001\255\255\047\001\255\255\
\255\255\255\255\255\255\255\255\053\001\255\255\055\001\026\001\
\027\001\000\000\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\000\000\041\001\042\001\
\255\255\044\001\045\001\255\255\047\001\255\255\255\255\255\255\
\255\255\255\255\053\001\255\255\055\001\026\001\027\001\000\000\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\000\000\041\001\042\001\255\255\044\001\
\045\001\255\255\047\001\255\255\255\255\255\255\255\255\255\255\
\053\001\255\255\055\001\000\000\026\001\027\001\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\000\000\041\001\042\001\255\255\044\001\045\001\
\255\255\047\001\255\255\255\255\001\001\002\001\003\001\053\001\
\255\255\055\001\026\001\255\255\028\001\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\000\000\041\001\042\001\255\255\255\255\045\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\026\001\027\001\000\000\255\255\030\001\031\001\043\001\000\000\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\042\001\054\001\044\001\045\001\255\255\047\001\000\000\255\255\
\255\255\255\255\255\255\053\001\000\000\055\001\026\001\027\001\
\255\255\255\255\030\001\031\001\255\255\255\255\034\001\035\001\
\036\001\037\001\038\001\039\001\255\255\041\001\042\001\255\255\
\044\001\045\001\255\255\047\001\255\255\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\026\001\027\001\255\255\255\255\
\030\001\031\001\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\041\001\042\001\255\255\044\001\045\001\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\055\001\026\001\027\001\255\255\255\255\030\001\031\001\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\041\001\042\001\255\255\044\001\045\001\053\001\255\255\055\001\
\255\255\255\255\255\255\255\255\053\001\255\255\055\001\255\255\
\255\255\034\001\035\001\036\001\037\001\038\001\039\001\255\255\
\041\001\042\001\255\255\044\001\045\001\255\255\047\001\255\255\
\255\255\255\255\255\255\255\255\053\001\255\255\055\001\255\255\
\255\255\255\255\041\001\042\001\255\255\044\001\045\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\041\001\042\001\
\055\001\044\001\045\001\255\255\047\001\255\255\255\255\255\255\
\255\255\255\255\053\001\255\255\055\001\255\255\255\255\255\255\
\041\001\042\001\255\255\044\001\045\001\034\001\035\001\036\001\
\037\001\038\001\039\001\255\255\041\001\042\001\055\001\044\001\
\045\001\255\255\047\001\255\255\255\255\255\255\255\255\255\255\
\053\001\255\255\055\001\255\255\041\001\042\001\255\255\044\001\
\045\001\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\039\001\055\001\041\001\042\001\255\255\044\001\045\001\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\055\001\255\255\255\255\001\001\002\001\003\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\255\255\255\255\041\001\042\001\255\255\044\001\045\001\
\041\001\042\001\255\255\044\001\045\001\255\255\043\001\053\001\
\255\255\055\001\255\255\255\255\049\001\255\255\055\001\041\001\
\042\001\054\001\044\001\045\001\255\255\041\001\042\001\255\255\
\044\001\045\001\255\255\255\255\255\255\055\001\255\255\255\255\
\255\255\255\255\255\255\055\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\055\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\255\255\042\001\255\255\255\255\255\255\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\045\001\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\045\001\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\045\001\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\045\001\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\045\001\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\044\001\255\255\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\053\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\255\255\
\255\255\255\255\255\255\053\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001"

let yynames_const = "\
  NOT\000\
  XOR\000\
  FISZERO\000\
  FLESS\000\
  FISPOS\000\
  FISNEG\000\
  FNEG\000\
  FABS\000\
  FHALF\000\
  FSQR\000\
  FLOOR\000\
  FLOATOFINT\000\
  INTOFFLOAT\000\
  SQRT\000\
  COS\000\
  SIN\000\
  TAN\000\
  ATAN\000\
  READINT\000\
  READFLOAT\000\
  PRINTINT\000\
  PRINTFLOAT\000\
  PLUS\000\
  MINUS\000\
  AST\000\
  SLASH\000\
  PLUS_DOT\000\
  MINUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  OPEN\000\
  SEMISEMI\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 141 "parser.mly"
                           ( _4 )
# 878 "parser.ml"
               : (Id.t * Syntax.t) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
    ( [] )
# 884 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 145 "parser.mly"
                             ( (_2, _4) :: _5 )
# 893 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 151 "parser.mly"
    ( _2 )
# 900 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
    ( symbol_range (), Unit )
# 906 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 155 "parser.mly"
    ( symbol_range (), Bool(_1) )
# 913 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 157 "parser.mly"
    ( symbol_range (), Int(_1) )
# 920 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 159 "parser.mly"
    ( symbol_range (), Float(_1) )
# 927 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 161 "parser.mly"
    ( symbol_range (), Var(_1) )
# 934 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 163 "parser.mly"
    ( symbol_range (), Get(_1, _4) )
# 942 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 167 "parser.mly"
    ( _1 )
# 949 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 170 "parser.mly"
    ( symbol_range (), Not(_2) )
# 956 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 173 "parser.mly"
    ( symbol_range (), Xor(_2, _3) )
# 964 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 176 "parser.mly"
    ( symbol_range (), FEq(_2, float 0.) )
# 971 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 179 "parser.mly"
    ( symbol_range (), FLT(_2, _3) )
# 979 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 182 "parser.mly"
    ( symbol_range (), FLT(float 0., _2) )
# 986 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 185 "parser.mly"
    ( symbol_range (), FLT(_2, float  0.) )
# 993 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 188 "parser.mly"
    ( symbol_range (), FNeg(_2) )
# 1000 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 191 "parser.mly"
    ( symbol_range (), FMul(_2, float 0.5) )
# 1007 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 194 "parser.mly"
    ( let tmp = Id.gentmp () in
      symbol_range (), Let(None, addtyp tmp, _2,
        (symbol_range (), FMul(var tmp, var tmp))) )
# 1016 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 199 "parser.mly"
    ( symbol_range (), FAbs(_2) )
# 1023 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 202 "parser.mly"
    ( symbol_range (), FFloor(_2) )
# 1030 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 205 "parser.mly"
    ( symbol_range (), IToF(_2) )
# 1037 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 208 "parser.mly"
    ( symbol_range (), FToI(_2) )
# 1044 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 211 "parser.mly"
    ( symbol_range (), FSqrt(_2) )
# 1051 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 214 "parser.mly"
    ( symbol_range (), snd @@ cos _2 )
# 1058 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 217 "parser.mly"
    ( symbol_range (), snd @@ sin _2 )
# 1065 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 220 "parser.mly"
    ( symbol_range (), snd @@ tan _2 )
# 1072 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 223 "parser.mly"
    ( symbol_range (), snd @@ atan _2 )
# 1079 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 226 "parser.mly"
    ( symbol_range (), Read )
# 1086 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 229 "parser.mly"
    ( symbol_range (), FRead )
# 1093 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 232 "parser.mly"
    ( symbol_range (), Write(_2) )
# 1100 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 235 "parser.mly"
    ( symbol_range (), FWrite(_2) )
# 1107 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 238 "parser.mly"
    ( symbol_range (), match _2 with
    | _, Float f -> Float(-.f)
    | e -> Neg e )
# 1116 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 242 "parser.mly"
    ( symbol_range (), Add(_1, _3) )
# 1124 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 244 "parser.mly"
    ( symbol_range (), Sub(_1, _3) )
# 1132 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 246 "parser.mly"
    ( assert(_3 = 4);
      symbol_range (), SllI(_1, 2) )
# 1141 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 249 "parser.mly"
    ( assert(_3 = 2);
      symbol_range (), SraI(_1, 1) )
# 1150 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 252 "parser.mly"
    ( symbol_range (), Eq(_1, _3) )
# 1158 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 254 "parser.mly"
    ( symbol_range (), Not(symbol_range (), Eq(_1, _3)) )
# 1166 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 256 "parser.mly"
    ( symbol_range (), LT(_1, _3) )
# 1174 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 258 "parser.mly"
    ( symbol_range (), LT(_3, _1) )
# 1182 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 260 "parser.mly"
    ( symbol_range (), Not(symbol_range (), LT(_3, _1)) )
# 1190 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 262 "parser.mly"
    ( symbol_range (), Not(symbol_range (), LT(_1, _3)) )
# 1198 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 265 "parser.mly"
    ( symbol_range (), If(_2, _4, _6) )
# 1207 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 268 "parser.mly"
    ( symbol_range (), FNeg(_2) )
# 1214 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 270 "parser.mly"
    ( symbol_range (), FAdd(_1, _3) )
# 1222 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 272 "parser.mly"
    ( symbol_range (), FSub(_1, _3) )
# 1230 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 274 "parser.mly"
    ( symbol_range (), FMul(_1, _3) )
# 1238 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 276 "parser.mly"
    ( symbol_range (), FDiv(_1, _3) )
# 1246 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 278 "parser.mly"
    ( _6 )
# 1255 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 281 "parser.mly"
    ( (* MATSUSHITA: added range *)
      if snd _6 = Int 0 then _4 else
      symbol_range (), Let(Some (Parsing.symbol_start_pos (), Parsing.rhs_end_pos 4), addtyp _2, _4, _6) )
# 1266 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formal_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 285 "parser.mly"
    ( _8 )
# 1275 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formal_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 287 "parser.mly"
    ( _8 )
# 1284 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 290 "parser.mly"
    ( (* MATSUSHITA: added range *)
      symbol_range (), LetRec(Some (Parsing.symbol_start_pos (), Parsing.rhs_end_pos 3), _3, _5) )
# 1293 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 294 "parser.mly"
    ( symbol_range (), App(_1, _2) )
# 1301 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 297 "parser.mly"
    ( symbol_range (), Tuple(_1) )
# 1308 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 299 "parser.mly"
    ( (* MATSUSHITA: added range *)
      symbol_range (), LetTuple(Some (Parsing.symbol_start_pos (), Parsing.rhs_end_pos 6), _3, _6, _8) )
# 1318 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 302 "parser.mly"
    ( symbol_range (), Put(_1, _4, _7) )
# 1327 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 304 "parser.mly"
    ( symbol_range (), Let(None, (Id.genunit (), Type.Unit), _1, _3) )
# 1335 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 306 "parser.mly"
    ( symbol_range (), Let(None, (Id.genunit (), Type.Unit), _1, (None, Unit)) )
# 1342 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 309 "parser.mly"
    ( symbol_range (), Array(_2, _3) )
# 1350 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 311 "parser.mly"
    ( Printf.printf "Parse error at %s\n" (H.show_range (symbol_range ()));
      exit 1 )
# 1357 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 316 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 1366 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 320 "parser.mly"
    ( addtyp _1 :: _2 )
# 1374 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 322 "parser.mly"
    ( [addtyp _1] )
# 1381 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 327 "parser.mly"
    ( _1 @ [_2] )
# 1389 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 330 "parser.mly"
    ( [_1] )
# 1396 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 334 "parser.mly"
    ( _1 @ [_3] )
# 1404 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 336 "parser.mly"
    ( [_1; _3] )
# 1412 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 340 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1420 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 342 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1428 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry globals *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
let globals (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : (Id.t * Syntax.t) list)
