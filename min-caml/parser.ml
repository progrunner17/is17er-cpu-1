type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | PLUS
  | MINUS
  | AST
  | SLASH
  | PLUS_DOT
  | MINUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | UIDENT of (Id.t)
  | OPEN
  | SEMISEMI
  | DELIM
  | FUN
  | MINUS_GREATER
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | XOR
  | FISZERO
  | FLESS
  | FISPOS
  | FISNEG
  | FNEG
  | FABS
  | FHALF
  | FSQR
  | FLOOR
  | FLOATOFINT
  | INTOFFLOAT
  | SQRT
  | COS
  | SIN
  | TAN
  | ATAN
  | READINT
  | READFLOAT
  | PRINTCHAR
  | PLUS_AT
  | MINUS_BANG

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Syntax
let addtyp x = (x, Type.gentyp ())

(* MATSUSHITA: added functions *)

let symbol_range () = Some (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())

let just body = None, body
let letint x e e' = just @@ Let (None, (x, Type.Int), e, e')
let letfloat x e e' = just @@ Let (None, (x, Type.Float), e, e')
let (&!) e n = just @@ AndI(e, n)
let var x = just @@ Var x
let int n = just @@ Int n
let float a = just @@ Float a
let ftoi e = just @@ FToI e
let itof e = just @@ IToF e
let (+!) e e' = just @@ FAdd(e, e')
let (-!) e e' = just @@ FSub(e, e')
let ( *!) e e' = just @@ FMul(e, e')
let (/!) e e' = just @@ FDiv(e, e')

let cos e =
  letfloat "x" e @@
  letfloat "xx" (var "x" *! var "x") @@
  letfloat "t2" (var "xx" /! float 2.) @@
  letfloat "t4" (var "t2" *! var "xx" /! float 12.) @@
  letfloat "t6" (var "t4" *! var "xx" /! float 30.) @@
  letfloat "t8" (var "t6" *! var "xx" /! float 56.) @@
  letfloat "t10" (var "t8" *! var "xx" /! float 90.) @@
  float 1. -! var "t2" +! var "t4" -! var "t6" +! var "t8" -! var "t10"

let pi = float 3.1415927

let sin e =
  letfloat "x" e @@
  letint "n" (ftoi (var "x" /! pi)) @@
  (float 1. -! itof (var "n" &! 1) *! float 2.) *!
    cos (var "x" -! itof (var "n") *! pi -! pi /! float 2.)

let tan e =
  letfloat "x" e @@
  letfloat "xx" (var "x" *! var "x") @@
  letfloat "t3" (var "x" *! var "xx" /! float 3.) @@
  letfloat "t5" (var "t3" *! var "xx" *! (float 2. /! float 5.)) @@
  letfloat "t7" (var "t5" *! var "xx" *! (float 17. /! float 42.)) @@
  letfloat "t9" (var "t7" *! var "xx" *! (float 62. /! float 153.)) @@
  var "x" +! var "t3" +! var "t5" +! var "t7" +! var "t9"

let atan e =
  letfloat "x" e @@
  letfloat "t1" ((var "x" -! float 2.) /! float 5.) @@
  letfloat "t2" ((var "t1" *! var "t1" *! float 2.)) @@
  letfloat "t3" ((var "t2" *! var "t1" *! (float 11. /! float 6.))) @@
  letfloat "t4" ((var "t3" *! var "t1" *! (float 18. /! float 11.))) @@
  letfloat "t5" ((var "t4" *! var "t1" *! (float 41. /! float 30.))) @@
  float 1.10714872 +! var "t1" -! var "t2" +! var "t3" -! var "t4" +! var "t5"

# 125 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* AST *);
  264 (* SLASH *);
  265 (* PLUS_DOT *);
  266 (* MINUS_DOT *);
  267 (* AST_DOT *);
  268 (* SLASH_DOT *);
  269 (* EQUAL *);
  270 (* LESS_GREATER *);
  271 (* LESS_EQUAL *);
  272 (* GREATER_EQUAL *);
  273 (* LESS *);
  274 (* GREATER *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  279 (* LET *);
  280 (* IN *);
  281 (* REC *);
  282 (* COMMA *);
  283 (* ARRAY_CREATE *);
  284 (* DOT *);
  285 (* LESS_MINUS *);
  287 (* OPEN *);
  288 (* SEMISEMI *);
  289 (* DELIM *);
  290 (* FUN *);
  291 (* MINUS_GREATER *);
  292 (* SEMICOLON *);
  293 (* LPAREN *);
  294 (* RPAREN *);
    0 (* EOF *);
  295 (* XOR *);
  296 (* FISZERO *);
  297 (* FLESS *);
  298 (* FISPOS *);
  299 (* FISNEG *);
  300 (* FNEG *);
  301 (* FABS *);
  302 (* FHALF *);
  303 (* FSQR *);
  304 (* FLOOR *);
  305 (* FLOATOFINT *);
  306 (* INTOFFLOAT *);
  307 (* SQRT *);
  308 (* COS *);
  309 (* SIN *);
  310 (* TAN *);
  311 (* ATAN *);
  312 (* READINT *);
  313 (* READFLOAT *);
  314 (* PRINTCHAR *);
  315 (* PLUS_AT *);
  316 (* MINUS_BANG *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  278 (* IDENT *);
  286 (* UIDENT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\005\000\005\000\007\000\007\000\008\000\
\008\000\009\000\009\000\000\000"

let yylen = "\002\000\
\004\000\001\000\005\000\002\000\003\000\002\000\001\000\001\000\
\001\000\001\000\005\000\001\000\002\000\003\000\002\000\003\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\006\000\002\000\003\000\003\000\
\003\000\003\000\006\000\006\000\008\000\008\000\005\000\004\000\
\002\000\001\000\008\000\007\000\003\000\002\000\003\000\003\000\
\002\000\001\000\004\000\002\000\001\000\002\000\001\000\003\000\
\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\066\000\007\000\008\000\009\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\076\000\000\000\000\000\
\000\000\000\000\034\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\000\000\005\000\
\000\000\000\000\000\000\000\000\037\000\038\000\000\000\000\000\
\049\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\000\074\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000"

let yydgoto = "\002\000\
\038\000\148\000\039\000\040\000\053\000\105\000\096\000\041\000\
\107\000"

let yysindex = "\010\000\
\006\255\000\000\000\000\000\000\000\000\000\000\077\255\222\005\
\222\005\222\005\000\000\001\255\077\255\244\254\254\254\161\005\
\077\255\077\255\077\255\077\255\077\255\077\255\077\255\077\255\
\077\255\077\255\077\255\077\255\077\255\077\255\077\255\077\255\
\077\255\077\255\077\255\077\255\222\005\000\000\092\007\002\255\
\009\255\255\254\000\000\000\000\022\006\019\255\023\255\111\255\
\043\255\129\005\040\255\254\254\038\255\000\000\054\006\129\005\
\255\254\129\005\255\254\255\254\255\254\255\254\255\254\255\254\
\255\254\255\254\255\254\255\254\255\254\255\254\255\254\255\254\
\255\254\255\254\255\254\000\000\222\005\222\005\074\255\075\255\
\222\005\222\005\222\005\222\005\222\005\222\005\222\005\222\005\
\222\005\222\005\222\005\222\005\222\005\047\255\255\254\077\255\
\222\005\048\255\222\005\222\005\222\005\254\254\254\254\254\254\
\076\255\081\255\249\254\255\254\011\255\000\000\222\005\000\000\
\255\254\255\254\063\255\063\255\000\000\000\000\063\255\063\255\
\000\000\000\000\237\255\237\255\237\255\237\255\237\255\237\255\
\147\007\092\007\063\255\222\005\255\254\147\007\222\005\088\006\
\120\006\152\006\088\255\090\255\095\255\222\005\087\255\089\255\
\097\255\091\255\222\005\000\000\092\007\184\006\218\006\222\005\
\222\005\222\005\222\005\222\005\222\005\092\007\000\000\000\000\
\222\005\099\255\092\007\102\255\000\000\124\007\092\007\092\007\
\092\007\252\006\028\007\060\007\222\005\222\005\222\005\222\005\
\222\005\112\255\124\007\092\007\092\007\092\007\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\000\115\000\
\181\003\149\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\243\254\000\000\000\000\000\000\000\000\
\183\000\000\000\217\000\251\000\032\001\066\001\106\001\143\001\
\177\001\211\001\245\001\023\002\057\002\094\002\128\002\162\002\
\196\002\230\002\008\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\215\003\000\000\000\000\041\000\042\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\076\003\000\000\000\000\000\000\000\000\
\113\003\147\003\249\003\027\004\000\000\000\000\061\004\095\004\
\000\000\000\000\166\004\200\004\234\004\004\005\030\005\056\005\
\140\004\223\003\132\004\000\000\081\000\174\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\004\000\000\000\000\
\000\000\000\000\134\000\001\000\000\000\207\004\106\004\083\005\
\115\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\005\091\005\114\005\122\005\000\000"

let yygindex = "\000\000\
\000\000\214\255\005\000\180\000\221\255\000\000\000\000\000\000\
\000\000"

let yytablesize = 2254
let yytable = "\069\000\
\011\000\046\000\004\000\005\000\006\000\003\000\004\000\005\000\
\006\000\007\000\001\000\008\000\043\000\044\000\045\000\009\000\
\110\000\051\000\144\000\052\000\055\000\069\000\047\000\011\000\
\010\000\048\000\098\000\011\000\012\000\094\000\145\000\100\000\
\013\000\146\000\097\000\101\000\014\000\049\000\016\000\015\000\
\071\000\076\000\016\000\147\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\106\000\037\000\139\000\140\000\141\000\079\000\080\000\109\000\
\111\000\083\000\084\000\117\000\118\000\004\000\005\000\006\000\
\070\000\115\000\116\000\132\000\135\000\119\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\011\000\142\000\155\000\134\000\156\000\136\000\
\137\000\138\000\143\000\157\000\159\000\161\000\160\000\173\000\
\162\000\016\000\012\000\149\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\174\000\002\000\102\000\004\000\146\000\183\000\
\150\000\091\000\067\000\151\000\000\000\000\000\000\000\000\000\
\147\000\000\000\158\000\092\000\013\000\103\000\000\000\163\000\
\000\000\000\000\000\000\000\000\166\000\167\000\168\000\169\000\
\170\000\171\000\000\000\000\000\104\000\172\000\000\000\000\000\
\000\000\000\000\093\000\000\000\000\000\000\000\000\000\000\000\
\000\000\178\000\179\000\180\000\181\000\182\000\015\000\000\000\
\000\000\000\000\042\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\000\000\000\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\017\000\000\000\000\000\095\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\000\000\000\000\
\000\000\000\000\000\000\113\000\000\000\114\000\000\000\000\000\
\000\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\011\000\011\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\133\000\011\000\011\000\011\000\011\000\
\011\000\000\000\011\000\000\000\011\000\000\000\000\000\019\000\
\000\000\011\000\000\000\000\000\011\000\011\000\011\000\093\000\
\000\000\071\000\071\000\071\000\000\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\011\000\071\000\071\000\071\000\071\000\
\071\000\022\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000\000\000\000\000\071\000\071\000\071\000\000\000\
\000\000\070\000\070\000\070\000\000\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\071\000\070\000\070\000\070\000\070\000\
\070\000\020\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\000\000\000\000\070\000\070\000\070\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\000\000\012\000\012\000\
\000\000\012\000\012\000\070\000\012\000\000\000\021\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\012\000\000\000\
\012\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\013\000\000\000\013\000\013\000\012\000\013\000\000\000\
\023\000\000\000\000\000\000\000\000\000\013\000\000\000\000\000\
\013\000\000\000\013\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\000\000\015\000\015\000\000\000\015\000\015\000\013\000\
\015\000\000\000\024\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\015\000\000\000\015\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\000\000\017\000\017\000\000\000\017\000\
\017\000\015\000\017\000\000\000\025\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\017\000\000\000\017\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\000\000\018\000\018\000\
\000\000\018\000\018\000\017\000\018\000\000\000\026\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\018\000\000\000\
\018\000\000\000\000\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\018\000\019\000\019\000\
\027\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\000\000\019\000\000\000\019\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\000\000\022\000\022\000\000\000\
\022\000\022\000\019\000\022\000\000\000\028\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\022\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\022\000\020\000\020\000\029\000\
\020\000\020\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\000\000\000\000\020\000\000\000\020\000\
\000\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\030\000\021\000\021\000\020\000\021\000\021\000\000\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\000\000\000\000\021\000\000\000\021\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\031\000\023\000\023\000\000\000\023\000\
\023\000\021\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\000\000\023\000\000\000\023\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\032\000\024\000\024\000\
\000\000\024\000\024\000\023\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\024\000\000\000\
\024\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\033\000\
\025\000\025\000\000\000\025\000\025\000\024\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\025\000\000\000\025\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\057\000\026\000\026\000\000\000\026\000\026\000\025\000\
\026\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\000\000\000\000\026\000\000\000\026\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\063\000\027\000\027\000\000\000\027\000\
\027\000\026\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\000\000\000\000\027\000\000\000\027\000\000\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\014\000\028\000\028\000\027\000\028\000\028\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\000\000\028\000\000\000\028\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\016\000\029\000\029\000\000\000\029\000\029\000\
\028\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\029\000\000\000\029\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\058\000\030\000\030\000\000\000\
\030\000\030\000\029\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\000\000\000\000\030\000\000\000\030\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\062\000\031\000\
\031\000\000\000\031\000\031\000\030\000\031\000\061\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\031\000\
\000\000\031\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\035\000\032\000\032\000\000\000\032\000\032\000\031\000\032\000\
\056\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\032\000\000\000\032\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\036\000\033\000\033\000\000\000\033\000\033\000\
\032\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\033\000\000\000\033\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\047\000\057\000\057\000\000\000\
\057\000\057\000\033\000\057\000\055\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\057\000\000\000\057\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\048\000\063\000\
\063\000\000\000\063\000\063\000\057\000\063\000\000\000\000\000\
\000\000\051\000\000\000\000\000\063\000\000\000\000\000\063\000\
\000\000\063\000\000\000\000\000\000\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\064\000\014\000\014\000\063\000\014\000\
\014\000\000\000\014\000\073\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\014\000\000\000\014\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\039\000\016\000\016\000\
\000\000\016\000\016\000\014\000\016\000\072\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\016\000\000\000\
\016\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\040\000\
\058\000\058\000\000\000\058\000\058\000\016\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\058\000\000\000\058\000\062\000\000\000\062\000\062\000\062\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\043\000\062\000\062\000\000\000\000\000\062\000\058\000\
\062\000\000\000\061\000\061\000\000\000\061\000\061\000\062\000\
\000\000\000\000\062\000\000\000\062\000\035\000\035\000\061\000\
\000\000\035\000\035\000\044\000\061\000\035\000\035\000\035\000\
\035\000\035\000\035\000\000\000\035\000\035\000\000\000\035\000\
\035\000\062\000\035\000\000\000\056\000\056\000\000\000\056\000\
\056\000\035\000\000\000\000\000\035\000\041\000\035\000\036\000\
\036\000\056\000\000\000\036\000\036\000\000\000\056\000\036\000\
\036\000\036\000\036\000\036\000\036\000\000\000\036\000\036\000\
\000\000\036\000\036\000\035\000\036\000\000\000\000\000\042\000\
\000\000\000\000\000\000\036\000\000\000\000\000\036\000\060\000\
\036\000\047\000\047\000\000\000\000\000\047\000\047\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\047\000\047\000\052\000\047\000\047\000\036\000\047\000\000\000\
\055\000\055\000\053\000\055\000\055\000\047\000\000\000\000\000\
\047\000\000\000\047\000\048\000\048\000\055\000\000\000\048\000\
\048\000\000\000\055\000\048\000\048\000\048\000\048\000\048\000\
\048\000\054\000\048\000\048\000\000\000\048\000\048\000\047\000\
\048\000\059\000\000\000\000\000\000\000\051\000\051\000\048\000\
\051\000\051\000\048\000\000\000\048\000\000\000\000\000\000\000\
\064\000\064\000\051\000\000\000\064\000\064\000\000\000\051\000\
\064\000\064\000\064\000\064\000\064\000\064\000\000\000\064\000\
\064\000\048\000\064\000\064\000\000\000\064\000\000\000\073\000\
\073\000\000\000\073\000\073\000\064\000\073\000\000\000\064\000\
\000\000\064\000\000\000\000\000\073\000\000\000\000\000\073\000\
\000\000\073\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\039\000\039\000\000\000\039\000\039\000\064\000\039\000\
\000\000\072\000\072\000\000\000\072\000\072\000\039\000\072\000\
\000\000\039\000\000\000\039\000\000\000\000\000\072\000\000\000\
\000\000\072\000\000\000\072\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\040\000\040\000\000\000\040\000\040\000\
\000\000\040\000\045\000\045\000\000\000\045\000\045\000\000\000\
\040\000\000\000\000\000\040\000\000\000\040\000\000\000\045\000\
\000\000\000\000\045\000\000\000\045\000\000\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\043\000\043\000\000\000\
\043\000\043\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\043\000\000\000\043\000\
\044\000\044\000\044\000\044\000\044\000\044\000\000\000\044\000\
\044\000\000\000\044\000\044\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\000\000\044\000\
\000\000\044\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\041\000\041\000\000\000\041\000\041\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\041\000\000\000\041\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\042\000\042\000\000\000\042\000\042\000\
\000\000\042\000\000\000\060\000\060\000\000\000\060\000\060\000\
\042\000\000\000\000\000\042\000\000\000\042\000\000\000\000\000\
\060\000\000\000\000\000\060\000\000\000\060\000\052\000\052\000\
\000\000\052\000\052\000\000\000\000\000\000\000\053\000\053\000\
\000\000\053\000\053\000\052\000\000\000\000\000\000\000\000\000\
\052\000\000\000\000\000\053\000\000\000\000\000\000\000\000\000\
\053\000\004\000\005\000\006\000\000\000\054\000\054\000\000\000\
\054\000\054\000\000\000\000\000\000\000\059\000\059\000\000\000\
\059\000\059\000\054\000\000\000\000\000\000\000\011\000\054\000\
\000\000\000\000\059\000\000\000\098\000\000\000\000\000\059\000\
\003\000\004\000\005\000\006\000\007\000\016\000\008\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\011\000\012\000\
\000\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\016\000\054\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\000\000\037\000\003\000\004\000\005\000\
\006\000\007\000\000\000\008\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\011\000\012\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\016\000\000\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\000\000\037\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\000\000\099\000\000\000\000\000\000\000\000\000\000\000\091\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\092\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\091\000\
\093\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\092\000\000\000\112\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\000\000\000\000\152\000\000\000\000\000\000\000\
\093\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\092\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\000\000\000\000\000\000\000\000\000\000\153\000\
\000\000\091\000\093\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\092\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\000\000\000\000\000\000\000\000\000\000\154\000\
\000\000\091\000\093\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\092\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\000\093\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\092\000\000\000\164\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\000\091\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\092\000\000\000\165\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\000\000\000\000\
\000\000\000\000\000\000\175\000\093\000\091\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\092\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\000\000\000\000\
\000\000\000\000\000\000\176\000\000\000\091\000\093\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\092\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\000\000\000\000\
\000\000\000\000\000\000\177\000\000\000\091\000\093\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\092\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\000\093\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\092\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\000\093\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\093\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\000"

let yycheck = "\013\001\
\000\000\001\001\001\001\002\001\003\001\000\001\001\001\002\001\
\003\001\004\001\001\000\006\001\008\000\009\000\010\000\010\001\
\052\000\030\001\026\001\022\001\016\000\035\001\022\001\022\001\
\019\001\025\001\028\001\022\001\023\001\028\001\038\001\013\001\
\027\001\023\001\026\001\013\001\031\001\037\001\037\001\034\001\
\000\000\037\000\037\001\033\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\022\001\060\001\102\000\103\000\104\000\007\001\008\001\032\001\
\035\001\011\001\012\001\002\001\002\001\001\001\002\001\003\001\
\000\000\077\000\078\000\037\001\037\001\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\022\001\024\001\013\001\097\000\013\001\099\000\
\100\000\101\000\026\001\013\001\022\001\013\001\022\001\013\001\
\022\001\037\001\000\000\111\000\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\029\001\000\000\022\001\000\000\023\001\178\000\
\132\000\026\001\024\001\135\000\255\255\255\255\255\255\255\255\
\033\001\255\255\142\000\036\001\000\000\039\001\255\255\147\000\
\255\255\255\255\255\255\255\255\152\000\153\000\154\000\155\000\
\156\000\157\000\255\255\255\255\054\001\161\000\255\255\255\255\
\255\255\255\255\059\001\255\255\255\255\255\255\255\255\255\255\
\255\255\173\000\174\000\175\000\176\000\177\000\000\000\255\255\
\255\255\255\255\007\000\255\255\255\255\255\255\255\255\255\255\
\013\000\255\255\255\255\255\255\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\000\000\255\255\255\255\040\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\050\000\255\255\255\255\
\255\255\255\255\255\255\056\000\255\255\058\000\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\096\000\020\001\021\001\022\001\023\001\
\024\001\255\255\026\001\255\255\028\001\255\255\255\255\000\000\
\255\255\033\001\255\255\255\255\036\001\037\001\038\001\059\001\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\059\001\020\001\021\001\022\001\023\001\
\024\001\000\000\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\037\001\038\001\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\059\001\020\001\021\001\022\001\023\001\
\024\001\000\000\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\037\001\038\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\023\001\024\001\059\001\026\001\255\255\000\000\255\255\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001\255\255\
\038\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\255\255\023\001\024\001\059\001\026\001\255\255\
\000\000\255\255\255\255\255\255\255\255\033\001\255\255\255\255\
\036\001\255\255\038\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\023\001\024\001\059\001\
\026\001\255\255\000\000\255\255\255\255\255\255\255\255\033\001\
\255\255\255\255\036\001\255\255\038\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\255\255\023\001\
\024\001\059\001\026\001\255\255\000\000\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\255\255\038\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\023\001\024\001\059\001\026\001\255\255\000\000\255\255\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001\255\255\
\038\001\255\255\255\255\255\255\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\059\001\023\001\024\001\
\000\000\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\036\001\255\255\038\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\023\001\024\001\059\001\026\001\255\255\000\000\255\255\255\255\
\255\255\255\255\033\001\255\255\255\255\036\001\255\255\038\001\
\255\255\255\255\255\255\255\255\255\255\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\059\001\020\001\021\001\000\000\
\023\001\024\001\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\255\255\036\001\255\255\038\001\
\255\255\255\255\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\000\000\020\001\021\001\059\001\023\001\024\001\255\255\
\026\001\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\255\255\255\255\036\001\255\255\038\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\023\001\
\024\001\059\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\255\255\038\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\000\000\020\001\021\001\
\255\255\023\001\024\001\059\001\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001\255\255\
\038\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\023\001\024\001\059\001\026\001\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\255\255\255\255\
\036\001\255\255\038\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\000\000\020\001\021\001\255\255\023\001\024\001\059\001\
\026\001\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\255\255\255\255\036\001\255\255\038\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\023\001\
\024\001\059\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\255\255\038\001\255\255\
\255\255\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\000\000\020\001\021\001\059\001\023\001\024\001\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\036\001\255\255\038\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\000\000\020\001\021\001\255\255\023\001\024\001\
\059\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\036\001\255\255\038\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\000\000\020\001\021\001\255\255\
\023\001\024\001\059\001\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\255\255\036\001\255\255\038\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\021\001\255\255\023\001\024\001\059\001\026\001\000\000\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\036\001\
\255\255\038\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\000\000\020\001\021\001\255\255\023\001\024\001\059\001\026\001\
\000\000\255\255\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\036\001\255\255\038\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\000\000\020\001\021\001\255\255\023\001\024\001\
\059\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\036\001\255\255\038\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\000\000\020\001\021\001\255\255\
\023\001\024\001\059\001\026\001\000\000\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\255\255\036\001\255\255\038\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\021\001\255\255\023\001\024\001\059\001\026\001\255\255\255\255\
\255\255\000\000\255\255\255\255\033\001\255\255\255\255\036\001\
\255\255\038\001\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\059\001\023\001\
\024\001\255\255\026\001\000\000\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\255\255\038\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\000\000\020\001\021\001\
\255\255\023\001\024\001\059\001\026\001\000\000\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001\255\255\
\038\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\023\001\024\001\059\001\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\255\255\255\255\
\036\001\255\255\038\001\005\001\255\255\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\000\000\020\001\021\001\255\255\255\255\024\001\059\001\
\026\001\255\255\020\001\021\001\255\255\023\001\024\001\033\001\
\255\255\255\255\036\001\255\255\038\001\005\001\006\001\033\001\
\255\255\009\001\010\001\000\000\038\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\255\255\023\001\
\024\001\059\001\026\001\255\255\020\001\021\001\255\255\023\001\
\024\001\033\001\255\255\255\255\036\001\000\000\038\001\005\001\
\006\001\033\001\255\255\009\001\010\001\255\255\038\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\023\001\024\001\059\001\026\001\255\255\255\255\000\000\
\255\255\255\255\255\255\033\001\255\255\255\255\036\001\000\000\
\038\001\005\001\006\001\255\255\255\255\009\001\010\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\000\000\023\001\024\001\059\001\026\001\255\255\
\020\001\021\001\000\000\023\001\024\001\033\001\255\255\255\255\
\036\001\255\255\038\001\005\001\006\001\033\001\255\255\009\001\
\010\001\255\255\038\001\013\001\014\001\015\001\016\001\017\001\
\018\001\000\000\020\001\021\001\255\255\023\001\024\001\059\001\
\026\001\000\000\255\255\255\255\255\255\020\001\021\001\033\001\
\023\001\024\001\036\001\255\255\038\001\255\255\255\255\255\255\
\005\001\006\001\033\001\255\255\009\001\010\001\255\255\038\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\059\001\023\001\024\001\255\255\026\001\255\255\020\001\
\021\001\255\255\023\001\024\001\033\001\026\001\255\255\036\001\
\255\255\038\001\255\255\255\255\033\001\255\255\255\255\036\001\
\255\255\038\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\021\001\255\255\023\001\024\001\059\001\026\001\
\255\255\020\001\021\001\255\255\023\001\024\001\033\001\026\001\
\255\255\036\001\255\255\038\001\255\255\255\255\033\001\255\255\
\255\255\036\001\255\255\038\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\023\001\024\001\
\255\255\026\001\020\001\021\001\255\255\023\001\024\001\255\255\
\033\001\255\255\255\255\036\001\255\255\038\001\255\255\033\001\
\255\255\255\255\036\001\255\255\038\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\023\001\024\001\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\255\255\036\001\255\255\038\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\023\001\024\001\255\255\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\036\001\
\255\255\038\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\021\001\255\255\023\001\024\001\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\036\001\255\255\038\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\023\001\024\001\
\255\255\026\001\255\255\020\001\021\001\255\255\023\001\024\001\
\033\001\255\255\255\255\036\001\255\255\038\001\255\255\255\255\
\033\001\255\255\255\255\036\001\255\255\038\001\020\001\021\001\
\255\255\023\001\024\001\255\255\255\255\255\255\020\001\021\001\
\255\255\023\001\024\001\033\001\255\255\255\255\255\255\255\255\
\038\001\255\255\255\255\033\001\255\255\255\255\255\255\255\255\
\038\001\001\001\002\001\003\001\255\255\020\001\021\001\255\255\
\023\001\024\001\255\255\255\255\255\255\020\001\021\001\255\255\
\023\001\024\001\033\001\255\255\255\255\255\255\022\001\038\001\
\255\255\255\255\033\001\255\255\028\001\255\255\255\255\038\001\
\000\001\001\001\002\001\003\001\004\001\037\001\006\001\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\060\001\000\001\001\001\002\001\
\003\001\004\001\255\255\006\001\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\255\255\255\255\037\001\255\255\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\255\255\060\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\059\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\255\255\038\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\021\001\255\255\255\255\255\255\
\059\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\026\001\059\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\026\001\059\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\059\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\255\255\038\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\059\001\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\255\255\038\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\024\001\059\001\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\026\001\059\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\026\001\059\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\059\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\059\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\059\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001"

let yynames_const = "\
  NOT\000\
  PLUS\000\
  MINUS\000\
  AST\000\
  SLASH\000\
  PLUS_DOT\000\
  MINUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  OPEN\000\
  SEMISEMI\000\
  DELIM\000\
  FUN\000\
  MINUS_GREATER\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  XOR\000\
  FISZERO\000\
  FLESS\000\
  FISPOS\000\
  FISNEG\000\
  FNEG\000\
  FABS\000\
  FHALF\000\
  FSQR\000\
  FLOOR\000\
  FLOATOFINT\000\
  INTOFFLOAT\000\
  SQRT\000\
  COS\000\
  SIN\000\
  TAN\000\
  ATAN\000\
  READINT\000\
  READFLOAT\000\
  PRINTCHAR\000\
  PLUS_AT\000\
  MINUS_BANG\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  UIDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'glob) in
    Obj.repr(
# 107 "parser.mly"
                            ( _4 )
# 944 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 108 "parser.mly"
      ( _1 )
# 951 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'glob) in
    Obj.repr(
# 113 "parser.mly"
    ( symbol_range (), Let(Some (Parsing.symbol_start_pos (), Parsing.rhs_end_pos 4),
        addtyp _2, _4, _5) )
# 961 "parser.ml"
               : 'glob))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 115 "parser.mly"
            ( _2 )
# 968 "parser.ml"
               : 'glob))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 121 "parser.mly"
    ( _2 )
# 975 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
    ( symbol_range (), Unit )
# 981 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 125 "parser.mly"
    ( symbol_range (), Bool(_1) )
# 988 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 127 "parser.mly"
    ( symbol_range (), Int(_1) )
# 995 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 129 "parser.mly"
    ( symbol_range (), Float(_1) )
# 1002 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 131 "parser.mly"
    ( symbol_range (), Var(_1) )
# 1009 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 133 "parser.mly"
    ( symbol_range (), Get(_1, _4) )
# 1017 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 137 "parser.mly"
    ( _1 )
# 1024 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 140 "parser.mly"
    ( symbol_range (), Not(_2) )
# 1031 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 143 "parser.mly"
    ( symbol_range (), Xor(_2, _3) )
# 1039 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 146 "parser.mly"
    ( symbol_range (), FEq(_2, float 0.) )
# 1046 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 149 "parser.mly"
    ( symbol_range (), FLT(_2, _3) )
# 1054 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 152 "parser.mly"
    ( symbol_range (), FLT(float 0., _2) )
# 1061 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 155 "parser.mly"
    ( symbol_range (), FLT(_2, float  0.) )
# 1068 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 158 "parser.mly"
    ( symbol_range (), FNeg(_2) )
# 1075 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 161 "parser.mly"
    ( symbol_range (), FMul(_2, float 0.5) )
# 1082 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 164 "parser.mly"
    ( let tmp = Id.gentmp () in
      symbol_range (), Let(None, addtyp tmp, _2,
        (symbol_range (), FMul(var tmp, var tmp))) )
# 1091 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 169 "parser.mly"
    ( symbol_range (), FAbs(_2) )
# 1098 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 172 "parser.mly"
    ( symbol_range (), FFloor(_2) )
# 1105 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 175 "parser.mly"
    ( symbol_range (), IToF(_2) )
# 1112 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 178 "parser.mly"
    ( symbol_range (), FToI(_2) )
# 1119 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 181 "parser.mly"
    ( symbol_range (), FSqrt(_2) )
# 1126 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 184 "parser.mly"
    ( symbol_range (), snd @@ cos _2 )
# 1133 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 187 "parser.mly"
    ( symbol_range (), snd @@ sin _2 )
# 1140 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 190 "parser.mly"
    ( symbol_range (), snd @@ tan _2 )
# 1147 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 193 "parser.mly"
    ( symbol_range (), snd @@ atan _2 )
# 1154 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 196 "parser.mly"
    ( symbol_range (), Read )
# 1161 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 199 "parser.mly"
    ( symbol_range (), FRead )
# 1168 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 202 "parser.mly"
    ( symbol_range (), Write _2 )
# 1175 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 205 "parser.mly"
    ( symbol_range (), match _2 with
    | _, Float f -> Float(-.f)
    | e -> Neg e )
# 1184 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 209 "parser.mly"
    ( symbol_range (), Add(_1, _3) )
# 1192 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 211 "parser.mly"
    ( symbol_range (), Sub(_1, _3) )
# 1200 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 213 "parser.mly"
    ( assert(_3 = 4);
      symbol_range (), SllI(_1, 2) )
# 1209 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 216 "parser.mly"
    ( assert(_3 = 2);
      symbol_range (), SraI(_1, 1) )
# 1218 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 219 "parser.mly"
    ( symbol_range (), Eq(_1, _3) )
# 1226 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 221 "parser.mly"
    ( symbol_range (), Not(symbol_range (), Eq(_1, _3)) )
# 1234 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 223 "parser.mly"
    ( symbol_range (), LT(_1, _3) )
# 1242 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 225 "parser.mly"
    ( symbol_range (), LT(_3, _1) )
# 1250 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 227 "parser.mly"
    ( symbol_range (), Not(symbol_range (), LT(_3, _1)) )
# 1258 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 229 "parser.mly"
    ( symbol_range (), Not(symbol_range (), LT(_1, _3)) )
# 1266 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 232 "parser.mly"
    ( symbol_range (), If(_2, _4, _6) )
# 1275 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 235 "parser.mly"
    ( symbol_range (), FNeg(_2) )
# 1282 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 237 "parser.mly"
    ( symbol_range (), FAdd(_1, _3) )
# 1290 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 239 "parser.mly"
    ( symbol_range (), FSub(_1, _3) )
# 1298 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 241 "parser.mly"
    ( symbol_range (), FMul(_1, _3) )
# 1306 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 243 "parser.mly"
    ( symbol_range (), FDiv(_1, _3) )
# 1314 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 246 "parser.mly"
    ( _6 )
# 1323 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 249 "parser.mly"
    ( (* MATSUSHITA: added range *)
      if snd _6 = Int 0 then _4 else
      symbol_range (), Let(Some (Parsing.symbol_start_pos (), Parsing.rhs_end_pos 4),
        addtyp _2, _4, _6) )
# 1335 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formal_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 256 "parser.mly"
    ( _8 )
# 1344 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formal_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 259 "parser.mly"
    ( _8 )
# 1353 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 262 "parser.mly"
    ( (* MATSUSHITA: added range *)
      symbol_range (), LetRec(Some (Parsing.symbol_start_pos (), Parsing.rhs_end_pos 3),
        _3, _5) )
# 1363 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 268 "parser.mly"
    (
      let f = Id.gentmp () in
      symbol_range (), LetRec(symbol_range (),
        { name = addtyp f; args = _2; body = _4 }, (symbol_range (), Var f))
    )
# 1375 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 275 "parser.mly"
    ( symbol_range (), App(_1, _2) )
# 1383 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 278 "parser.mly"
    ( symbol_range (), Tuple(_1) )
# 1390 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 280 "parser.mly"
    ( (* MATSUSHITA: added range *)
      symbol_range (), LetTuple(Some (Parsing.symbol_start_pos (), Parsing.rhs_end_pos 6),
        _3, _6, _8) )
# 1401 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 284 "parser.mly"
    ( symbol_range (), Put(_1, _4, _7) )
# 1410 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 286 "parser.mly"
    ( symbol_range (), Let(None, (Id.genunit (), Type.Unit), _1, _3) )
# 1418 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 288 "parser.mly"
    ( symbol_range (), Let(None, (Id.genunit (), Type.Unit), _1, (None, Unit)) )
# 1425 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 291 "parser.mly"
    ( symbol_range (), Array(_2, _3) )
# 1433 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 294 "parser.mly"
    ( symbol_range (), IFAdd(_1, _3) )
# 1441 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 297 "parser.mly"
    ( symbol_range (), NotNeg(_2) )
# 1448 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 299 "parser.mly"
    ( Printf.printf "Parse error at %s\n" (H.show_range (symbol_range ()));
      exit 1 )
# 1455 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 304 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 1464 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 308 "parser.mly"
    ( addtyp _1 :: _2 )
# 1472 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 310 "parser.mly"
    ( [addtyp _1] )
# 1479 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 315 "parser.mly"
    ( _1 @ [_2] )
# 1487 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 318 "parser.mly"
    ( [_1] )
# 1494 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 322 "parser.mly"
    ( _1 @ [_3] )
# 1502 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 324 "parser.mly"
    ( [_1; _3] )
# 1510 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 328 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1518 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 330 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1526 "parser.ml"
               : 'pat))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
